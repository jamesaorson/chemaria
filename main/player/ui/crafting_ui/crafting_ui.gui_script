local globals = require "modules.globals"
local gooey = require "gooey.gooey"
local helpers = require "modules.helpers"
local input_constants = require "modules.constants.input"
local item_constants = require "modules.constants.items"
local message_constants = require "modules.constants.messages"
local recipes = require "modules.constants.recipes"
local theme = require "main.ui.theme"

local INPUT_FOCUS = hash("blue_button05")
local INPUT = hash("blue_button03")

local BUTTON_PRESSED = hash("button_pressed")
local BUTTON = hash("button_idle")

local LIST_ITEM_SELECTED = hash("button_pressed")
local LIST_ITEM_PRESSED = hash("button_pressed")
local LIST_ITEM_DISABLED = hash("button_disabled")
local LIST_ITEM = hash("button_idle")

local SCOPED_SELF

-------------
-- Helpers --
-------------

local button_handler
local fill_crafting_list_ui
local fill_recipe_list
local on_item_selected
local on_scrolled
local get_recipes_for_selected_tab
local update_button
local update_crafting_ui
local update_crafting_list
local update_list_item

function button_handler(button, handler)
	if button.released_now then
		handler()
	end
end

function fill_crafting_list_ui(self, action_id, action)
	self.scrollbar = gooey.vertical_scrollbar(
		"scrollbar/handle",
		"scrollbar/bounds",
		action_id,
		action,
		function() end
	)
	theme.dynamic_list(
		"crafting_list",
		self.recipe_list,
		action_id,
		action,
		on_item_selected,
		update_crafting_list
	).scroll_to(0, self.scrollbar.scroll.y)
end

function fill_recipe_list(self)
	self.recipe_list = {}
	local recipe_list_to_check = get_recipes_for_selected_tab(self)
	if recipe_list_to_check ~= nil then
		for i, recipe in pairs(recipe_list_to_check) do
			local components_to_check = {}
			local can_craft = helpers.check_for_crafting_components(self, recipe, components_to_check, {}, globals.get_toolbar())
			if not can_craft then
				can_craft = helpers.check_for_crafting_components(self, recipe, components_to_check, {}, globals.get_inventory())
			end
			table.insert(
				self.recipe_list,
				{
					item_id = recipe.item_id,
					components = recipe.components,
					can_craft = can_craft
				}
			)
		end
	end
	self.should_update_crafting_ui = true
end

function get_recipes_for_selected_tab(self)
	if self.selected_tab == 1 then
		return recipes.CRAFTABLES
	elseif self.selected_tab == 2 then
		return recipes.SMELTABLES
	else
		return nil
	end
end

function on_item_selected(list)
	local selected_recipe = list.data[list.selected_item]
	msg.post(
		"/player#player_script",
		message_constants.CRAFT,
		{
			recipe =  selected_recipe
		}
	)
end

function update_crafting_list(list)
	local item_text_node_id = hash("crafting_list/listitem_text")
	for key, item in pairs(list.items) do
		update_list_item(list, item)
		if item.data ~= nil and item.data.item_id ~= nil then
			gui.set_text(item.nodes[item_text_node_id], item_constants.ALL_ITEMS[item.data.item_id].display_name)
		end
	end
end

function update_crafting_ui(self)
	if self.is_crafting_ui_enabled then
		gooey.acquire_input()
	else
		gooey.release_input()
	end
	gui.set_enabled(gui.get_node("crafting_ui"), self.is_crafting_ui_enabled)
	gui.set_enabled(gui.get_node("scrollbar/bounds"), #self.recipe_list > 5)
	self.should_update_crafting_ui = false
end

function update_list_item(list, item)
	local item_position = gui.get_position(item.root)

	local animation_to_play = LIST_ITEM
	local selected_recipe = SCOPED_SELF.recipe_list[item.index]
	if selected_recipe ~= nil and not selected_recipe.can_craft then
		animation_to_play = LIST_ITEM_DISABLED
	elseif item.index == list.pressed_item then
		animation_to_play = LIST_ITEM_PRESSED
	end
	gui.play_flipbook(item.root, animation_to_play)
	gui.set_position(item.root, item_position)
end

-----------------
-- End Helpers --
-----------------


----------------------
-- Defold functions --
----------------------

function init(self)
	SCOPED_SELF = self
	self.is_crafting_ui_enabled = false
	self.should_update_crafting_ui = false
	self.scrollbar = nil
	self.selected_tab = 1
	fill_recipe_list(self)
	gui.set_enabled(gui.get_node("crafting_ui"), self.is_crafting_ui_enabled)
	fill_crafting_list_ui(self)
end

function on_input(self, action_id, action)
	theme.button("tools_menu_button", action_id, action, function(button)
		button_handler(button, function()
			self.selected_tab = 1
			fill_recipe_list(self)
		end)
	end, self.selected_tab == 1)

	theme.button("smelt_menu_button", action_id, action, function(button)
		button_handler(button, function()
			self.selected_tab = 2
			fill_recipe_list(self)
		end)
	end, self.selected_tab == 2)

	theme.button("materials_menu_button", action_id, action, function(button)
		button_handler(button, function()
			self.selected_tab = 3
			fill_recipe_list(self)
		end)
	end, self.selected_tab == 3)

	fill_crafting_list_ui(self, action_id, action)
end

function on_message(self, message_id, message, sender)
	if not globals.is_paused then
		if message_id == input_constants.TOGGLE_CRAFTING_MENU then
			self.is_crafting_ui_enabled = not self.is_crafting_ui_enabled
			self.should_update_crafting_ui = true
		end
	end
	if message_id == message_constants.UPDATE_RECIPE_LIST then
		fill_recipe_list(self)
		self.should_update_crafting_ui = true
	end
end

function update(self, dt)
	if self.should_update_crafting_ui then
		update_crafting_ui(self)
		gui.play_flipbook(gui.get_node("tools_menu_button/bg"), BUTTON)
		gui.play_flipbook(gui.get_node("smelt_menu_button/bg"), BUTTON)
		gui.play_flipbook(gui.get_node("materials_menu_button/bg"), BUTTON)
		if self.selected_tab == 1 then
			gui.play_flipbook(gui.get_node("tools_menu_button/bg"), BUTTON_PRESSED)
		elseif self.selected_tab == 2 then
			gui.play_flipbook(gui.get_node("smelt_menu_button/bg"), BUTTON_PRESSED)
		elseif self.selected_tab == 3 then
			gui.play_flipbook(gui.get_node("materials_menu_button/bg"), BUTTON_PRESSED)
		end
	end
end

--------------------------
-- End Defold functions --
--------------------------