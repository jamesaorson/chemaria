local config = require "modules.config"
local globals = require "modules.globals"
local helpers = require "modules.helpers"
local item_constants = require "modules.constants.items"
local orthographic = require "orthographic.camera"
local platypus = require "platypus.platypus"
local player_constants = require "modules.constants.player"
local position_helpers = require "modules.position_helpers"

require "modules.models.Block"
require "modules.models.Chunk"
require "modules.models.World"

----------------------
-- Message Handlers --
----------------------

local handle_jump
local handle_left
local handle_left_click
local handle_right

function handle_jump(self, messageId, message, sender)
	if message.pressed then
		self.platypus.jump(player_constants.PLAYER_JUMP_FORCE)
	elseif message.released then
		self.platypus.abort_jump(0.5)
	end
end

function handle_left(self, messageId, message, sender)
	self.platypus.left(player_constants.PLAYER_VELOCITY.x)
end

function handle_left_click(self, messageId, message, sender)
	self.miningMessage = message
	if message.pressed then
		self.miningTimerHandle = timer.delay(player_constants.PLAYER_BASE_MINING_INTERVAL, true, function (self, handle, timeElapsed)
			msg.post("/world#world_script", "mine_block", self.miningMessage)
		end)
	elseif message.released then
		if self.miningTimerHandle then
			timer.cancel(self.miningTimerHandle)
		end
	end
end

function handle_right(self, messageId, message, sender)
	self.platypus.right(player_constants.PLAYER_VELOCITY.x)
end

--------------------------
-- End Message Handlers --
--------------------------


----------------------
-- Defold functions --
----------------------

function init(self)
	currentChunk = nil
	self.platypus = platypus.create(config.PLATYPUS_CONFIG)
	defos.set_cursor_visible(true)
end

function update(self, dt)
	self.platypus.update(dt)
end

function on_message(self, messageId, message, sender)
	self.platypus.on_message(messageId, message)

	if messageId == hash("jump") then
		handle_jump(self, messageId, message, sender)
	elseif messageId == hash("left") then
		handle_left(self, messageId, message, sender)
	elseif messageId == hash("left_click") then
		handle_left_click(self, messageId, message, sender)
	elseif messageId == hash("right") then
		handle_right(self, messageId, message, sender)
	end
end

--------------------------
-- End Defold functions --
--------------------------