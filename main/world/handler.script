local camera = require "orthographic.camera"
local camera_constants = require "modules.constants.camera"
local config = require "modules.config"
local helpers = require "modules.helpers"
local json_lib = require "modules.json_lib"
local screen_constants = require "modules.constants.screen"
local toolbar_constants = require "modules.constants.toolbar"
local world_constants = require "modules.constants.world"

require "modules.models.Block"
require "modules.models.Chunk"
require "modules.models.World"

-------------
-- Helpers --
-------------

local apply_config
local is_inventory_switch_action
local quit_game
local save_game
local send_crafting_ui_action
local send_player_action
local send_ui_action

function apply_config()
	defos.set_fullscreen(config.IS_FULLSCREEN)

	screen_constants.SCREEN_SIZE.x, screen_constants.SCREEN_SIZE.y, screen_constants.SCREEN_SIZE.w, screen_constants.SCREEN_SIZE.h = defos.get_window_size()

	msg.post(camera_constants.CAMERA_ID, "deadzone", config.CAMERA_DEADZONE)
	msg.post(camera_constants.CAMERA_ID, "zoom_to", config.CAMERA_ZOOM_LEVEL)
end

function is_inventory_switch_action(actionId)
	local baseId = "inventory_switch_"
	for i = 1, toolbar_constants.TOOLBAR_MAX_SLOTS do
		if actionId == hash(baseId .. i) then
			return true
		end
	end
	return false
end

function quit_game(shouldSave)
	if shouldSave then
		save_game()
	end

	msg.post("@system:", "exit", { code = 0 })
end

function save_game()
	local worldFileName = sys.get_save_file(config.SAVE_PATH.folder, config.SAVE_PATH.name) .. ".json"
	local worldFile = io.open(worldFileName, "w+")
	print("Writing save file to " .. worldFileName)
	local minimalWorld = {
		chunks = {}
	}
	for chunkX = -world_constants.WORLD_DIMENSIONS.x, world_constants.WORLD_DIMENSIONS.x do
		for chunkY = -world_constants.WORLD_DIMENSIONS.y, world_constants.WORLD_DIMENSIONS.y do
			local chunk = World.get_chunk_at_position(world, { x = chunkX, y = chunkY })
			chunk.position = { x = chunk.position.x, y = chunk.position.y, z = chunk.position.z }
			chunk.isRendered = nil
			local blocks = chunk.blocks
			for blockY = 0, world_constants.CHUNK_SIZE - 1 do
				for blockX = 0, world_constants.CHUNK_SIZE - 1 do
					local block = Chunk.get_block_at_position(chunk, { x = blockX, y = blockY })
					if block then
						block.position = { x = block.position.x, y = block.position.y, z = block.position.z }
						if block.chunk then
							block.chunk = { x = block.chunk.x, y = block.chunk.y, z = block.chunk.z }
						end
						block.pickupId = nil
						block.name = nil
						block.url = nil
					end
				end
			end
			if not minimalWorld.chunks[chunkX] then
				minimalWorld.chunks[chunkX] = {}
			end
			minimalWorld.chunks[chunkX][chunkY] = chunk
		end
	end

	local saveData = json_lib.stringify(minimalWorld)
	worldFile:write(saveData)
	print("Wrote save file to " .. worldFileName)
end

function send_crafting_ui_action(actionId, action)
	msg.post("/crafting_ui#crafting_ui", actionId, action)
end

function send_player_action(actionId, action)
	msg.post("/player#player_script", actionId, action)
end

function send_ui_action(actionId, action)
	msg.post("/ui#ui", actionId, action)
end

-----------------
-- End Helpers --
-----------------


---------------------
-- Action Handlers --
---------------------

local handle_craft
local handle_inventory_switch
local handle_jump
local handle_left
local handle_left_click
local handle_mouse_wheel_down
local handle_mouse_wheel_up
local handle_quit
local handle_right
local handle_right_click
local handle_toggle_crafting_menu
local handle_toggle_fullscreen
local handle_toggle_inventory
local handle_toggle_profile
local handle_ui_exit

function handle_inventory_switch(self, actionId, action)
	send_ui_action(actionId, action)
end

function handle_jump(self, actionId, action)
	send_player_action(actionId, action)
end

function handle_left(self, actionId, action)
	send_player_action(actionId, action)
end

function handle_left_click(self, actionId, action)
	send_ui_action(actionId, action)
	send_player_action(actionId, action)
end

function handle_mouse_wheel_down(self, actionId, action)
	send_ui_action(actionId, action)
end

function handle_mouse_wheel_up(self, actionId, action)
	send_ui_action(actionId, action)
end

function handle_quit(self, actionId, action)
	quit_game(false)
end

function handle_right(self, actionId, action)
	send_player_action(actionId, action)
end

function handle_right_click(self, actionId, action)
	send_player_action(actionId, action)
end

function handle_toggle_crafting_menu(self, actionId, action)
	send_crafting_ui_action(actionId, action)
end

function handle_toggle_fullscreen(self, actionId, action)
	defos.set_fullscreen(not defos.is_fullscreen())
end

function handle_toggle_inventory(self, actionId, action)
	send_ui_action(actionId, action)
end

function handle_toggle_profile(self, actionId, action)
	msg.post("@system:", "toggle_profile")
end

function handle_ui_exit(self, actionId, action)
	send_crafting_ui_action(actionId, action)
	send_ui_action(actionId, action)
end

-------------------------
-- End Action Handlers --
-------------------------


----------------------
-- Defold functions --
----------------------

function init(self)
	msg.post("/world#main", "acquire_input_focus")
	self.game_mode = "play"
	apply_config()
end

function on_input(self, actionId, action)
	if action.pressed and is_inventory_switch_action(actionId) then
		handle_inventory_switch(self, actionId, action)
	elseif actionId == hash("jump") then
		handle_jump(self, actionId, action)
	elseif actionId == hash("left") then
		handle_left(self, actionId, action)
	elseif actionId == hash("left_click") then
		handle_left_click(self, actionId, action)
	elseif actionId == hash("mouse_wheel_up") and action.pressed then
		handle_mouse_wheel_up(self, actionId, action)
	elseif actionId == hash("mouse_wheel_down") and action.pressed then
		handle_mouse_wheel_down(self, actionId, action)
	elseif actionId == hash("quit") and action.released then
		handle_quit(self, actionId, action)
	elseif actionId == hash("right") then
		handle_right(self, actionId, action)
	elseif actionId == hash("right_click") then
		handle_right_click(self, actionId, action)
	elseif actionId == hash("toggle_crafting_menu") and action.released then
		handle_toggle_crafting_menu(self, actionId, action)
	elseif actionId == hash("toggle_fullscreen") and action.released then
		handle_toggle_fullscreen(self, actionId, action)
	elseif actionId == hash("toggle_inventory") and action.released then
		handle_toggle_inventory(self, actionId, action)
	elseif actionId == hash("toggle_profile") and action.released then
		handle_toggle_profile(self, actionId, action)
	elseif actionId == hash("ui_exit") and action.released then
		handle_ui_exit(self, actionId, action)
	end
end

--------------------------
-- End Defold functions --
--------------------------