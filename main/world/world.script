local constants = require "modules.constants"
local urls = require "modules.urls"
local orthographic = require "orthographic.camera"
local position_helpers = require "modules.position_helpers"

require "modules.models.Block"
require "modules.models.Chunk"
require "modules.models.World"

world = World:new()

-------------
-- Helpers --
-------------

local function mine_block(blockUrl)
	go.delete(blockUrl)
end

local function create_block(self, block)
	local truePosition = position_helpers.block_to_screen_position(block)
	local rotation = nil
	local properties = {}
	local scale = 1.0

	local factoryBlock = factory.create(urls.get_factory_url(block.type), truePosition, rotation, properties, scale)
	block.url = factoryBlock
	local blockChunk = world:get_chunk_at_position(block.chunk)
	if blockChunk then
		blockChunk:add_block(block)
	end

	return true
end

-----------------
-- End Helpers --
-----------------


----------------------
-- Message Handlers --
----------------------

local function handle_mine_block(self, messageId, message, sender)
	local screenPosition = vmath.vector3(message.screen_x, message.screen_y, 0)
	local miningBlockPosition = position_helpers.screen_to_block_position(screenPosition)
	local miningChunkPosition = position_helpers.screen_to_chunk_position(screenPosition)
	local chunk = world:get_chunk_at_position(miningChunkPosition)
	if chunk then
		local block = chunk:get_block_at_position(miningBlockPosition)
		if block then
			chunk:remove_block_at_position(miningBlockPosition)
			mine_block(block.url)
		end
	end
end

local function handle_place_block(self, messageId, message, sender)
	local toolbarItem = message.toolbarItem
	if toolbarItem and toolbarItem.type ~= "empty" then
		local messagePosition = vmath.vector3(message.screen_x, message.screen_y, 0)
		local chunkPosition = position_helpers.screen_to_chunk_position(messagePosition)
		local chunk = world:get_chunk_at_position(chunkPosition)
		if chunk then
			local blockPosition = position_helpers.screen_to_block_position(messagePosition)
			if not chunk:get_block_at_position(blockPosition) then
				local block = {
					chunk = chunk,
					position = blockPosition,
					type = toolbarItem.type
				}
				if create_block(self, block) then
					toolbarItem.count = toolbarItem.count - 1
					msg.post("/player#player_script", "update_toolbar_item", toolbarItem)
				end
			end
		end
	end
end

--------------------------
-- End Message Handlers --
--------------------------


----------------------
-- Defold functions --
----------------------

function init(self)
	local worldFileName = sys.get_save_file("chemaria", "world_save")
	--local savedWorld = sys.load(worldFileName)
	
	if savedWorld and savedWorld.chunks then
		world.chunks = savedWorld.chunks
	else
		local chunks = {}

		for x = -constants.CHUNK_MAX.x, constants.CHUNK_MAX.x do
			for y = -constants.CHUNK_MAX.y, constants.CHUNK_MAX.y do
				local chunkToInsert = Chunk:new()
				chunkToInsert.position = vmath.vector3(x, y, 0)
				table.insert(chunks, chunkToInsert)
			end
		end

		for chunkIndex, chunk in pairs(chunks) do
			local blockType = nil
			if chunk.position.y == 0 then
				blockType = "dirt"
			elseif chunk.position.y < 0 and chunk.position.y > -constants.CHUNK_MAX.y / 2 then
				blockType = "stone"
			end
			if blockType and chunk.position.x > -5 and chunk.position.x < 5 then
				for y = 0, constants.CHUNK_SIZE - 1 do
					for x = 0, constants.CHUNK_SIZE - 1 do
						local blockToInsert = Block:new()
						blockToInsert.chunk = chunk
						blockToInsert.position = vmath.vector3(x, y, 0)
						blockToInsert.type = blockType
						chunk:add_block(blockToInsert)
					end
				end
			end
		end

		for i, chunk in pairs(chunks) do
			world:add_chunk(chunk)
		end
	end
	for chunkX, chunkXColumn in pairs(world.chunks) do
		for chunkY, chunk in pairs(chunkXColumn) do
			pprint(chunk)
			for blockX, blockXColumn in pairs(chunk.blocks) do
				for blockY, block in pairs(blockXColumn) do
					create_block(self, block)
				end
			end
		end
	end
end

function on_message(self, messageId, message, sender)
	if messageId == hash("mine_block") then
		handle_mine_block(self, messageId, message, sender)
	elseif messageId == hash("place_block") and message.pressed then
		handle_place_block(self, messageId, message, sender)
	end
end

--------------------------
-- End Defold functions --
--------------------------