local constants = require "modules.constants"
local urls = require "modules.urls"

require "modules.models.Block"
require "modules.models.Chunk"

function init(self)
	local dirtUrl = urls.get_factory_url("dirt")
	local stoneUrl = urls.get_factory_url("stone")
	local dirtChunks = {}
	local stoneChunks = {}

	-- Dirt chunks
	for i = 0, 3 do
		local chunkToInsert = Chunk:new()
		chunkToInsert.origin = vmath.vector3(i * constants.CHUNK_UNIT, 0, 0)
		table.insert(dirtChunks, chunkToInsert)
	end

	for chunkIndex, chunk in ipairs(dirtChunks) do
		for y = -1, -constants.CHUNK_UNIT, -1 do
			for x = 1, constants.CHUNK_UNIT do
				local blockToInsert = Block:new()
				blockToInsert.position = vmath.vector3(chunk.origin.x + x, chunk.origin.y + y, 0)
				blockToInsert.type = "dirt"
				chunk:add_block(blockToInsert)
			end
		end
	end
	
	-- Stone chunks
	for i = 0, 3 do
		local chunkToInsert = Chunk:new()
		chunkToInsert.origin = vmath.vector3(i * constants.CHUNK_UNIT, -12, 0)
		table.insert(stoneChunks, chunkToInsert)
	end
	
	for chunkIndex, chunk in ipairs(stoneChunks) do
		for y = -1, -constants.CHUNK_UNIT, -1 do
			for x = 1, constants.CHUNK_UNIT do
				local blockToInsert = Block:new()
				blockToInsert.position = vmath.vector3(chunk.origin.x + x, chunk.origin.y + y, 0)
				blockToInsert.type = "stone"
				chunk:add_block(blockToInsert)
			end
		end
	end

	local chunks = {}

	for i, dirtChunk in ipairs(dirtChunks) do
		table.insert(chunks, dirtChunk)
	end
	for i, stoneChunk in ipairs(stoneChunks) do
		table.insert(chunks, stoneChunk)
	end

	for i, chunk in ipairs(chunks) do
		for j, block in ipairs(chunk.blocks) do
			create_block(self, block)
		end
	end
end

function create_block(self, block)
	local rotation = nil
	local properties = {}
	local scale = 1.0

	local truePosition = block.position * 32
	
	local block = factory.create(urls.get_factory_url(block.type), truePosition, rotation, properties, scale)
end