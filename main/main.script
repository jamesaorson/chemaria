local camera = require "orthographic.camera"
local config = require "modules.config"
local constants = require "modules.constants"
local helpers = require "modules.helpers"

-------------
-- Helpers --
-------------

local function is_inventory_switch_action(actionId)
	local baseId = "inventory_switch_"
	for i = 1, constants.TOOLBAR_MAX_SLOTS do
		if actionId == hash(baseId .. i) then
			return true
		end
	end
	return false
end

local function quit_game()
	local worldFileName = sys.get_save_file(config.SAVE_PATH.folder, config.SAVE_PATH.name)
	print("Wrote save file to " .. worldFileName)
	local minimalWorld = {
		chunks = {}
	}
	for i = -3, 3 do
		minimalWorld.chunks[i] = world.chunks[i]
	end
	if not sys.save(worldFileName, minimalWorld) then
		print("Something went wrong")
	end
	
	msg.post("@system:", "exit", { code = 0 })
end

local function send_player_action(actionId, action)
	msg.post("/player#player_script", actionId, action)
end

local function send_gui_action(actionId, action)
	msg.post("/ui#ui", actionId, action)
end

local function apply_config()
	defos.set_fullscreen(config.IS_FULLSCREEN)
	msg.post(hash("/camera"), "deadzone", config.CAMERA_DEADZONE)
	msg.post(hash("/camera"), "zoom_to", config.CAMERA_ZOOM_LEVEL)
end

-----------------
-- End Helpers --
-----------------


---------------------
-- Action Handlers --
---------------------

local function handle_inventory_switch(self, actionId, action)
	send_gui_action(actionId, action)
end

local function handle_jump(self, actionId, action)
	send_player_action(actionId, action)
end

local function handle_left(self, actionId, action)
	send_player_action(actionId, action)
end

local function handle_left_click(self, actionId, action)
	send_gui_action(actionId, action)
	send_player_action(actionId, action)
end

local function handle_mouse_wheel_down(self, actionId, action)
	send_gui_action(actionId, action)
end

local function handle_mouse_wheel_up(self, actionId, action)
	send_gui_action(actionId, action)
end

local function handle_quit(self, actionId, action)
	quit_game()
end

local function handle_right(self, actionId, action)
	send_player_action(actionId, action)
end

local function handle_right_click(self, actionId, action)
	send_player_action(actionId, action)
end

local function handle_toggle_fullscreen(self, actionId, action)

end

local function handle_toggle_inventory(self, actionId, action)
	send_gui_action(actionId, action)
end

local function handle_toggle_profile(self, actionId, action)
	msg.post("@system:", "toggle_profile")
end

-------------------------
-- End Action Handlers --
-------------------------


----------------------
-- Defold functions --
----------------------

function init(self)
	msg.post(".", "acquire_input_focus")
	self.game_mode = "play"
	apply_config()
end

function on_input(self, actionId, action)
	if action.pressed and is_inventory_switch_action(actionId) then
		handle_inventory_switch(self, actionId, action)
	elseif actionId == hash("jump") then
		handle_jump(self, actionId, action)
	elseif actionId == hash("left") then
		handle_left(self, actionId, action)
	elseif actionId == hash("left_click") then
		handle_left_click(self, actionId, action)
	elseif actionId == hash("mouse_wheel_up") and action.pressed then
		handle_mouse_wheel_up(self, actionId, action)
	elseif actionId == hash("mouse_wheel_down") and action.pressed then
		handle_mouse_wheel_down(self, actionId, action)
	elseif actionId == hash("quit") and action.pressed then
		handle_quit(self, actionId, action)
	elseif actionId == hash("right") then
		handle_right(self, actionId, action)
	elseif actionId == hash("right_click") then
		handle_right_click(self, actionId, action)
	elseif actionId == hash("toggle_fullscreen") and action.pressed then
		handle_toggle_fullscreen(self, actionId, action)
	elseif actionId == hash("toggle_inventory") and action.pressed then
		handle_toggle_inventory(self, actionId, action)
	elseif actionId == hash("toggle_profile") and action.pressed then
		handle_toggle_profile(self, actionId, action)
	end
end

--------------------------
-- End Defold functions --
--------------------------