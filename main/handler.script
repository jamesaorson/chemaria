local camera = require "orthographic.camera"
local camera_constants = require "modules.constants.camera"
local globals = require "modules.globals"
local helpers = require "modules.helpers"
local input_constants = require "modules.constants.input"
local screen_constants = require "modules.constants.screen"
local toolbar_constants = require "modules.constants.toolbar"
local world_constants = require "modules.constants.world"

require "modules.models.Block"
require "modules.models.Chunk"
require "modules.models.World"

-------------
-- Helpers --
-------------

local apply_config
local is_inventory_switch_action
local send_crafting_ui_action
local send_player_action
local send_ui_action

function apply_config()
	defos.set_fullscreen(helpers.get_config_data("FULLSCREEN"))

	screen_constants.SCREEN_SIZE.x, screen_constants.SCREEN_SIZE.y, screen_constants.SCREEN_SIZE.w, screen_constants.SCREEN_SIZE.h = defos.get_window_size()

	msg.post(camera_constants.CAMERA_ID, "deadzone", helpers.get_config_data("CAMERA_DEADZONE"))
	msg.post(camera_constants.CAMERA_ID, "zoom_to", helpers.get_config_data("CAMERA_ZOOM_LEVEL"))
end

function is_inventory_switch_action(actionId)
	for i = 1, toolbar_constants.TOOLBAR_MAX_SLOTS do
		if actionId == input_constants.INVENTORY_SWITCH[i] then
			return true
		end
	end
	return false
end

function send_crafting_ui_action(actionId, action)
	msg.post("/crafting_ui#crafting_ui", actionId, action)
end

function send_player_action(actionId, action)
	msg.post("/player#player_script", actionId, action)
end

function send_ui_action(actionId, action)
	msg.post("/ui#ui", actionId, action)
end

-----------------
-- End Helpers --
-----------------


---------------------
-- Action Handlers --
---------------------

local handle_craft
local handle_inventory_switch
local handle_jump
local handle_left
local handle_left_click
local handle_mouse_wheel_down
local handle_mouse_wheel_up
local handle_right
local handle_right_click
local handle_toggle_crafting_menu
local handle_toggle_fullscreen
local handle_toggle_inventory
local handle_toggle_pause_menu
local handle_toggle_profile

function handle_inventory_switch(self, actionId, action)
	send_ui_action(actionId, action)
end

function handle_jump(self, actionId, action)
	send_player_action(actionId, action)
end

function handle_left(self, actionId, action)
	send_player_action(actionId, action)
end

function handle_left_click(self, actionId, action)
	send_ui_action(actionId, action)
	send_player_action(actionId, action)
end

function handle_mouse_wheel_down(self, actionId, action)
	send_ui_action(actionId, action)
end

function handle_mouse_wheel_up(self, actionId, action)
	send_ui_action(actionId, action)
end

function handle_quit(self, actionId, action)
end

function handle_right(self, actionId, action)
	send_player_action(actionId, action)
end

function handle_right_click(self, actionId, action)
	send_player_action(actionId, action)
end

function handle_toggle_crafting_menu(self, actionId, action)
	send_crafting_ui_action(actionId, action)
end

function handle_toggle_fullscreen(self, actionId, action)
	defos.set_fullscreen(not defos.is_fullscreen())
end

function handle_toggle_inventory(self, actionId, action)
	send_ui_action(actionId, action)
end

function handle_toggle_pause_menu(self, actionId, action)
	send_player_action(actionId, action)
end

function handle_toggle_profile(self, actionId, action)
	msg.post("@system:", "toggle_profile")
end

-------------------------
-- End Action Handlers --
-------------------------


----------------------
-- Defold functions --
----------------------

function init(self)
	msg.post("/world#main", "acquire_input_focus")
	self.game_mode = "play"
	helpers.init_config_data()
	apply_config()
end

function on_input(self, actionId, action)
	if action.pressed and is_inventory_switch_action(actionId) then
		handle_inventory_switch(self, actionId, action)
	elseif actionId == input_constants.JUMP then
		handle_jump(self, actionId, action)
	elseif actionId == input_constants.LEFT then
		handle_left(self, actionId, action)
	elseif actionId == input_constants.LEFT_CLICK then
		handle_left_click(self, actionId, action)
	elseif actionId == input_constants.MOUSE_WHEEL_UP and action.pressed then
		handle_mouse_wheel_up(self, actionId, action)
	elseif actionId == input_constants.MOUSE_WHEEL_DOWN and action.pressed then
		handle_mouse_wheel_down(self, actionId, action)
	elseif actionId == input_constants.RIGHT then
		handle_right(self, actionId, action)
	elseif actionId == input_constants.RIGHT_CLICK then
		handle_right_click(self, actionId, action)
	elseif actionId == input_constants.TOGGLE_CRAFTING_MENU and action.released then
		handle_toggle_crafting_menu(self, actionId, action)
	elseif actionId == input_constants.TOGGLE_FULLSCREEN and action.released then
		handle_toggle_fullscreen(self, actionId, action)
	elseif actionId == input_constants.TOGGLE_INVENTORY and action.released then
		handle_toggle_inventory(self, actionId, action)
	elseif actionId == input_constants.TOGGLE_PAUSE_MENU and action.released then
		handle_toggle_pause_menu(self, actionId, action)
	elseif actionId == input_constants.TOGGLE_PROFILE and action.released then
		handle_toggle_profile(self, actionId, action)
	end
end

function final(self)
	helpers.save_config_data()
end

--------------------------
-- End Defold functions --
--------------------------