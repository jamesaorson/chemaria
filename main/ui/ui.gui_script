local constants = require "modules.constants"
local globals = require "modules.globals"
local orthographic = require "orthographic.camera"
local urls = require "modules.urls"

-------------
-- Helpers --
-------------

local function get_inventory_switch_switch_index(messageId)
	local baseId = "inventory_switch_"
	for i = 1, constants.TOOLBAR_MAX_SLOTS do
		if messageId == hash(baseId .. i) then
			return i
		end
	end
	return -1
end

local function is_inventory_switch_message(messageId)
	local baseId = "inventory_switch_"
	for i = 1, constants.TOOLBAR_MAX_SLOTS do
		if messageId == hash(baseId .. i) then
			return true
		end
	end
	return false
end

local function switch_selected_inventory_item(self, row, index)
	self.selectedInventoryItem = {row, index}
	self.shouldUpdateInventory = true
	msg.post("/player#player_script", "switch_selected_inventory_item", { inventoryRowAndIndex = {row, index} })
end

local function switch_selected_toolbar_item(self, index)
	self.selectedToolbarItem = index
	self.shouldUpdateToolbar = true
	msg.post("/player#player_script", "switch_selected_toolbar_item", { toolbarIndex = index })
end

local function update_inventory(self)
	gui.set_enabled(gui.get_node("inventory_node"), self.isInventoryEnabled)

	for i = 0, constants.INVENTORY_SIZE.rows - 1 do
		for j = 1, constants.INVENTORY_SIZE.rowSize do
			local rowIndex = i + 1
			if self.inventory[rowIndex] then
				local inventoryItem = self.inventory[rowIndex][j]
				local inventoryNode = gui.get_node("inventory/" .. (i * constants.INVENTORY_SIZE.rowSize + j))
				local inventoryTextNode = gui.get_node("inventory/text" .. (i * constants.INVENTORY_SIZE.rowSize + j))
				if inventoryItem and inventoryItem.type ~= "empty" then
					gui.set_text(inventoryTextNode, inventoryItem.count .. " " .. inventoryItem.type)
				else
					gui.set_text(inventoryTextNode, "None")
				end
				gui.set_color(inventoryNode, constants.INVENTORY_UNSELECTED_COLOR)
			end
		end
	end

	local selectedInventoryNode = gui.get_node("inventory/" ..  (self.selectedInventoryItem[1] - 1) * constants.INVENTORY_SIZE.rowSize + self.selectedInventoryItem[2])
	gui.set_color(selectedInventoryNode, constants.INVENTORY_SELECTED_COLOR)
	
	self.shouldUpdateInventory = false
end

local function update_toolbar(self)
	for i, toolbarItem in pairs(self.toolbar) do
		local toolbarNode = gui.get_node(urls.get_toolbar_node_url(i))
		local toolbarTextNode = gui.get_node(urls.get_toolbar_text_node_url(i))
		
		if toolbarItem and toolbarItem.type ~= "empty" then
			gui.set_text(toolbarTextNode, toolbarItem.count .. " " .. toolbarItem.type)
		else
			gui.set_text(toolbarTextNode, "None")
		end
		gui.set_color(toolbarNode, constants.TOOLBAR_UNSELECTED_COLOR)
	end

	local selectedToolbarNode = gui.get_node(urls.get_toolbar_node_url(self.selectedToolbarItem))
	gui.set_color(selectedToolbarNode, constants.TOOLBAR_SELECTED_COLOR)

	self.shouldUpdateToolbar = false
end

-----------------
-- End Helpers --
-----------------


----------------------
-- Message Handlers --
----------------------

local function handle_inventory_switch(self, messageId, message, sender, switchIndex)
	local switchIndex = get_inventory_switch_switch_index(messageId)
	if switchIndex ~= -1 then
		switch_selected_toolbar_item(self, switchIndex)
	end
end

local function handle_left_click(self, messageId, message, sender)
	local isToolbarClicked = false
	for i = 1, constants.TOOLBAR_MAX_SLOTS do
		local toolbarItem = gui.get_node(urls.get_toolbar_text_node_url(i))
		if gui.pick_node(toolbarItem, message.x, message.y) then
			isToolbarClicked = true
			if i ~= self.selectedToolbarItem then
				switch_selected_toolbar_item(self, i)
			end
			break
		end
	end

	if not isToolbarClicked then
		for i = 0, constants.INVENTORY_SIZE.rows - 1 do
			for j = 1, constants.INVENTORY_SIZE.rowSize do
				local rowIndex = i + 1
				local inventoryItem = gui.get_node("inventory/" .. (i * constants.INVENTORY_SIZE.rowSize + j))
				if gui.pick_node(inventoryItem, message.x, message.y) then
					if i ~= self.selectedInventoryItem[1] or j ~= self.selectedInventoryItem[2] then
						switch_selected_inventory_item(self, rowIndex, j)
					end
					break
				end
			end
		end
	end
end

local function handle_mouse_wheel_down(self, messageId, message, sender)
	if self.selectedToolbarItem ~= constants.TOOLBAR_MAX_SLOTS then
		local index = (self.selectedToolbarItem + 1) % (constants.TOOLBAR_MAX_SLOTS + 1)
		switch_selected_toolbar_item(self, index)
	end
end

local function handle_mouse_wheel_up(self, messageId, message, sender)
	if self.selectedToolbarItem ~= 1 then
		local index = (self.selectedToolbarItem - 1 + constants.TOOLBAR_MAX_SLOTS) % constants.TOOLBAR_MAX_SLOTS
		switch_selected_toolbar_item(self, index)
	end
end

local function handle_toggle_inventory(self, messageId, message, sender)
	self.isInventoryEnabled = not self.isInventoryEnabled
	self.shouldUpdateInventory = true
end

local function handle_update_toolbar(self, messageId, message, sender)
	self.shouldUpdateToolbar = true
end

--------------------------
-- End Message Handlers --
--------------------------


----------------------
-- Defold functions --
----------------------

function init(self)
	self.inventory = globals.get_inventory()
	self.selectedInventoryItem = {1, 1}
	self.shouldUpdateInventory = true
	self.isInventoryEnabled = false

	self.selectedToolbarItem = 1
	self.shouldUpdateToolbar = true
	self.toolbar = globals.get_toolbar()

	for i = 1, 10 do
		local newToolbarItem = {
			index = i,
			count = 5,
			type = "dirt"
		}
		self.shouldUpdateToolbar = true
		globals.update_toolbar_item(newToolbarItem)
	end
	
	update_inventory(self)
	update_toolbar(self)
end

function update(self, dt)
	if self.shouldUpdateInventory then
		update_inventory(self)
	end
	if self.shouldUpdateToolbar then
		update_toolbar(self)
	end
end

function on_message(self, messageId, message, sender)
	local clickedNode = nil
	if is_inventory_switch_message(messageId) then
		handle_inventory_switch(self, messageId, message, sender)
	elseif messageId == hash("left_click") and message.pressed then
		handle_left_click(self, messageId, message, sender)
	elseif messageId == hash("mouse_wheel_down") then
		handle_mouse_wheel_down(self, messageId, message, sender)
	elseif messageId == hash("mouse_wheel_up") then
		handle_mouse_wheel_up(self, messageId, message, sender)
	elseif messageId == hash("toggle_inventory") then
		handle_toggle_inventory(self, messageId, message, sender)
	elseif messageId == hash("update_toolbar") then
		handle_update_toolbar(self, messageId, message, sender)
	end
end