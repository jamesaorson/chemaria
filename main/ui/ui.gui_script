local globals = require "modules.globals"
local inventory_constants = require "modules.constants.inventory"
local item_constants = require "modules.constants.items"
local orthographic = require "orthographic.camera"
local toolbar_constants = require "modules.constants.toolbar"
local urls = require "modules.urls"

-------------
-- Helpers --
-------------

local change_slot_texture
local end_drag
local get_inventory_switch_index
local is_inventory_switch_message
local start_drag
local switch_selected_inventory_item
local switch_selected_toolbar_item
local update_inventory
local update_toolbar

function change_slot_texture(slotNode, texture)
	if not texture then
		texture = item_constants.NONE.name
	end
	gui.set_texture(slotNode, "block_textures")
	gui.play_flipbook(slotNode, texture)
end

function end_drag(self, message)
	self.isDragging = false

	local nodeActedUpon = nil

	local isToolbarClicked = false
	local toolbarIndex = nil

	local isInventoryClicked = false
	local inventoryIndices = nil

	for i = 1, toolbar_constants.TOOLBAR_MAX_SLOTS do
		local toolbarItem = gui.get_node(urls.get_toolbar_text_node_url(i))
		if gui.pick_node(toolbarItem, message.screen_x, message.screen_y) then
			isToolbarClicked = true
			pickedIndex = i
			nodeActedUpon = toolbarItem
			break
		end
	end

	if not isToolbarClicked then
		for i = 1, inventory_constants.INVENTORY_MAX_SLOTS do
			local inventoryItem = gui.get_node(urls.get_inventory_node_url(i))
			if gui.pick_node(inventoryItem, message.screen_x, message.screen_y) then
				isInventoryClicked = true
				pickedIndex = i
				nodeActedUpon = inventoryItem
				break
			end
		end
	end

	local shouldSetSelectedNode = false
	if not self.draggedItem then
		shouldSetSelectedNode = true
	else
		if isToolbarClicked or isInventoryClicked then
			local destinationUiElement = nil

			local isSameUiElement = false
			if isToolbarClicked then
				isSameUiElement = self.draggedItem.startingUiElement == "toolbar"
				destinationUiElement = self.toolbar
			elseif isInventoryClicked then
				isSameUiElement = self.draggedItem.startingUiElement == "inventory"
				destinationUiElement = self.inventory
			end

			if isSameUiElement and pickedIndex == self.draggedItem.startingIndex then
				shouldSetSelectedNode = true
			else
				local temp = destinationUiElement[pickedIndex]
				local sourceUiElement = self[self.draggedItem.startingUiElement]
				local startingItem = sourceUiElement[self.draggedItem.startingIndex]
				sourceUiElement[self.draggedItem.startingIndex] = temp
				sourceUiElement[self.draggedItem.startingIndex].index = self.draggedItem.startingIndex

				destinationUiElement[pickedIndex] = startingItem
				destinationUiElement[pickedIndex].index = pickedIndex
				self.shouldUpdateInventory = true
				self.shouldUpdateToolbar = true
			end
		end
	end

	if shouldSetSelectedNode then
		if isToolbarClicked then
			switch_selected_toolbar_item(self, pickedIndex)
		elseif isInventoryClicked then
			switch_selected_inventory_item(self, pickedIndex)
		end
	end
	self.draggedItem = nil
end

function get_inventory_switch_index(messageId)
	local baseId = "inventory_switch_"
	for i = 1, toolbar_constants.TOOLBAR_MAX_SLOTS do
		if messageId == hash(baseId .. i) then
			return i
		end
	end
	return -1
end

function is_inventory_switch_message(messageId)
	local baseId = "inventory_switch_"
	for i = 1, toolbar_constants.TOOLBAR_MAX_SLOTS do
		if messageId == hash(baseId .. i) then
			return true
		end
	end
	return false
end

function start_drag(self, message)
	self.isDragging = true

	for i = 1, toolbar_constants.TOOLBAR_MAX_SLOTS do
		local toolbarItem = gui.get_node(urls.get_toolbar_text_node_url(i))
		if gui.pick_node(toolbarItem, message.screen_x, message.screen_y) then
			self.draggedItem = { startingUiElement = "toolbar", startingIndex = i }
			break
		end
	end
	if not self.draggedItem then
		for i = 1, inventory_constants.INVENTORY_MAX_SLOTS do
			local inventoryItem = gui.get_node(urls.get_inventory_node_url(i))
			if gui.pick_node(inventoryItem, message.screen_x, message.screen_y) then
				self.draggedItem = { startingUiElement = "inventory", startingIndex = i } 
				break
			end
		end
	end
end

function switch_selected_inventory_item(self, index)
	self.selectedInventoryItem = index
	self.shouldUpdateInventory = true
	msg.post("/player#player_script", "switch_selected_inventory_item", { inventoryRowAndIndex = {row, index} })
end

function switch_selected_toolbar_item(self, index)
	self.selectedToolbarItem = index
	self.shouldUpdateToolbar = true
	msg.post("/player#player_script", "switch_selected_toolbar_item", { toolbarIndex = index })
end

function update_inventory(self)
	gui.set_enabled(gui.get_node("inventory_node"), self.isInventoryEnabled)

	for i = 1, inventory_constants.INVENTORY_MAX_SLOTS do
		local inventoryItem = self.inventory[i]
		local inventoryNode = gui.get_node(urls.get_inventory_node_url(i))
		local inventoryTextNode = gui.get_node(urls.get_inventory_text_node_url(i))
		if inventoryItem and inventoryItem.id ~= item_constants.NONE.id then
			gui.set_text(inventoryTextNode, inventoryItem.count)
			change_slot_texture(inventoryNode, inventoryItem.name)
		elseif inventoryItem.count == 0 then
			gui.set_text(inventoryTextNode, "None")
			change_slot_texture(inventoryNode, item_constants.NONE.name)
		end
		gui.set_color(inventoryNode, inventory_constants.INVENTORY_UNSELECTED_COLOR)
	end

	local selectedInventoryNode = gui.get_node(urls.get_inventory_node_url(self.selectedInventoryItem))
	gui.set_color(selectedInventoryNode, inventory_constants.INVENTORY_SELECTED_COLOR)
	
	self.shouldUpdateInventory = false
end

function update_toolbar(self)
	for i, toolbarItem in pairs(self.toolbar) do
		local toolbarNode = gui.get_node(urls.get_toolbar_node_url(i))
		local toolbarTextNode = gui.get_node(urls.get_toolbar_text_node_url(i))
		if toolbarItem and toolbarItem.id ~= item_constants.NONE.id then
			gui.set_text(toolbarTextNode, toolbarItem.count)
			change_slot_texture(toolbarNode, toolbarItem.name)
		elseif toolbarItem.count == 0 then
			gui.set_text(toolbarTextNode, "None")
			change_slot_texture(toolbarNode, item_constants.NONE.name)
		end
		gui.set_color(toolbarNode, toolbar_constants.TOOLBAR_UNSELECTED_COLOR)
	end

	local selectedToolbarNode = gui.get_node(urls.get_toolbar_node_url(self.selectedToolbarItem))
	gui.set_color(selectedToolbarNode, toolbar_constants.TOOLBAR_SELECTED_COLOR)

	self.shouldUpdateToolbar = false
end

-----------------
-- End Helpers --
-----------------


----------------------
-- Message Handlers --
----------------------

local handle_inventory_switch
local handle_left_click
local handle_mouse_wheel_down
local handle_mouse_wheel_up
local handle_toggle_inventory
local handle_update_toolbar

function handle_inventory_switch(self, messageId, message, sender, switchIndex)
	local switchIndex = get_inventory_switch_index(messageId)
	if switchIndex ~= -1 then
		switch_selected_toolbar_item(self, switchIndex)
	end
end

function handle_left_click(self, messageId, message, sender)
	if message.pressed then
		start_drag(self, message)
	elseif message.released then
		end_drag(self, message)
	end
end

function handle_mouse_wheel_down(self, messageId, message, sender)
	if self.selectedToolbarItem ~= toolbar_constants.TOOLBAR_MAX_SLOTS then
		local index = (self.selectedToolbarItem + 1) % (toolbar_constants.TOOLBAR_MAX_SLOTS + 1)
		switch_selected_toolbar_item(self, index)
	end
end

function handle_mouse_wheel_up(self, messageId, message, sender)
	if self.selectedToolbarItem ~= 1 then
		local index = (self.selectedToolbarItem - 1 + toolbar_constants.TOOLBAR_MAX_SLOTS) % toolbar_constants.TOOLBAR_MAX_SLOTS
		switch_selected_toolbar_item(self, index)
	end
end

function handle_toggle_inventory(self, messageId, message, sender)
	self.isInventoryEnabled = not self.isInventoryEnabled
	self.shouldUpdateInventory = true
end

function handle_update_inventory(self, messageId, message, sender)
	self.shouldUpdateInventory = true
end

function handle_update_toolbar(self, messageId, message, sender)
	self.shouldUpdateToolbar = true
end

--------------------------
-- End Message Handlers --
--------------------------


----------------------
-- Defold functions --
----------------------

function init(self)
	self.inventory = globals.get_inventory()
	self.selectedInventoryItem = 1
	self.shouldUpdateInventory = true
	self.isInventoryEnabled = false

	self.selectedToolbarItem = 1
	self.shouldUpdateToolbar = true
	self.toolbar = globals.get_toolbar()

	self.isDragging = false
	self.draggedItem = nil

	local inventoryBlockInfo = item_constants.WOOD_PLANKS
	for i = 1, inventory_constants.INVENTORY_MAX_SLOTS do
		local newInventoryItem = {
			id = inventoryBlockInfo.id,
			index = i,
			count = inventoryBlockInfo.stackSize,
			name = inventoryBlockInfo.name
		}
		self.shouldUpdateInventory = true
		globals.update_inventory_item(newInventoryItem)
	end

	local inventoryBlockInfo = item_constants.STONE_BRICKS
	for i = 1, toolbar_constants.TOOLBAR_MAX_SLOTS do
		local newToolbarItem = {
			id = inventoryBlockInfo.id,
			index = i,
			count = inventoryBlockInfo.stackSize,
			name = inventoryBlockInfo.name
		}
		self.shouldUpdateToolbar = true
		globals.update_toolbar_item(newToolbarItem)
	end
	
	update_inventory(self)
	update_toolbar(self)
end

function update(self, dt)
	if self.shouldUpdateInventory then
		update_inventory(self)
	end
	if self.shouldUpdateToolbar then
		update_toolbar(self)
	end
end

function on_message(self, messageId, message, sender)
	local clickedNode = nil
	if is_inventory_switch_message(messageId) then
		handle_inventory_switch(self, messageId, message, sender)
	elseif messageId == hash("left_click") then
		handle_left_click(self, messageId, message, sender)
	elseif messageId == hash("mouse_wheel_down") then
		handle_mouse_wheel_down(self, messageId, message, sender)
	elseif messageId == hash("mouse_wheel_up") then
		handle_mouse_wheel_up(self, messageId, message, sender)
	elseif messageId == hash("toggle_inventory") then
		handle_toggle_inventory(self, messageId, message, sender)
	elseif messageId == hash("update_inventory") then
		handle_update_inventory(self, messageId, message, sender)
	elseif messageId == hash("update_toolbar") then
		handle_update_toolbar(self, messageId, message, sender)
	end
end