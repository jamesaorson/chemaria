local constants = require "modules.constants"
local globals = require "modules.globals"
local orthographic = require "orthographic.camera"

-------------
-- Helpers --
-------------

local function get_inventory_switch_switch_index(messageId)
	local baseId = "inventory_switch_"
	for i = 1, constants.TOOLBAR_MAX_SLOTS do
		if messageId == hash(baseId .. i) then
			return i
		end
	end
	return -1
end

local function is_inventory_switch_message(messageId)
	local baseId = "inventory_switch_"
	for i = 1, constants.TOOLBAR_MAX_SLOTS do
		if messageId == hash(baseId .. i) then
			return true
		end
	end
	return false
end

local function switch_selected_toolbar_item(self, index)
	self.selectedToolbarItem = index
	self.shouldUpdateToolbar = true
	msg.post("/player#player_script", "switch_selected_toolbar_item", { toolbarIndex = index })
end

local function update_inventory(self)
	gui.set_enabled(gui.get_node("inventory_node"), self.isInventoryEnabled)
end

-----------------
-- End Helpers --
-----------------


----------------------
-- Message Handlers --
----------------------

local function handle_inventory_switch(self, messageId, message, sender, switchIndex)
	local switchIndex = get_inventory_switch_switch_index(messageId)
	if switchIndex ~= -1 then
		switch_selected_toolbar_item(self, switchIndex)
	end
end

local function handle_left_click(self, messageId, message, sender)
	for i = 1, constants.TOOLBAR_MAX_SLOTS do
		local toolbarItem = gui.get_node("toolbar/text" .. i)
		if gui.pick_node(toolbarItem, message.x, message.y) then
			clickedNode = toolbarItem
			if i ~= self.selectedToolbarItem then
				switch_selected_toolbar_item(self, i)
			end
			break
		end
	end
end

local function handle_mouse_wheel_down(self, messageId, message, sender)
	if self.selectedToolbarItem ~= constants.TOOLBAR_MAX_SLOTS then
		local index = (self.selectedToolbarItem + 1) % (constants.TOOLBAR_MAX_SLOTS + 1)
		switch_selected_toolbar_item(self, index)
	end
end

local function handle_mouse_wheel_up(self, messageId, message, sender)
	if self.selectedToolbarItem ~= 1 then
		local index = (self.selectedToolbarItem - 1 + constants.TOOLBAR_MAX_SLOTS) % constants.TOOLBAR_MAX_SLOTS
		switch_selected_toolbar_item(self, index)
	end
end

local function handle_toggle_inventory(self, messageId, message, sender)
	self.isInventoryEnabled = not self.isInventoryEnabled
end

local function handle_update_toolbar(self, messageId, message, sender)
	self.shouldUpdateToolbar = true
end

--------------------------
-- End Message Handlers --
--------------------------


----------------------
-- Defold functions --
----------------------

function init(self)
	self.selectedToolbarItem = 1
	self.shouldUpdateInventory = true
	self.shouldUpdateToolbar = true
	self.isInventoryEnabled = false
	self.toolbar = globals.get_toolbar()

	for i = 1, 10 do
		local newToolbarItem = {
			index = i,
			count = 5,
			type = "dirt"
		}
		self.shouldUpdateToolbar = true
		globals.add_to_toolbar(newToolbarItem)
	end
	update_inventory(self)
end

function update(self, dt)
	if self.shouldUpdateToolbar then
		for i, toolbarItem in pairs(self.toolbar) do
			local toolbarNode = gui.get_node("toolbar/" ..  i)
			local toolbarTextNode = gui.get_node("toolbar/text" ..  i)
			if toolbarItem and toolbarItem.type ~= "empty" then
				gui.set_text(toolbarTextNode, toolbarItem.count .. " " .. toolbarItem.type)
			else
				gui.set_text(toolbarTextNode, "None")
			end
			gui.set_color(toolbarNode, constants.TOOLBAR_UNSELECTED_COLOR)
		end

		local selectedToolbarNode = gui.get_node("toolbar/" ..  self.selectedToolbarItem)
		gui.set_color(selectedToolbarNode, constants.TOOLBAR_SELECTED_COLOR)
		
		self.shouldUpdateToolbar = false
	end
	if self.shouldUpdateInventory then
		update_inventory(self)
	end
end

function on_message(self, messageId, message, sender)
	local clickedNode = nil
	if is_inventory_switch_message(messageId) then
		handle_inventory_switch(self, messageId, message, sender)
	elseif messageId == hash("left_click") and message.released then
		handle_left_click(self, messageId, message, sender)
	elseif messageId == hash("mouse_wheel_down") then
		handle_mouse_wheel_down(self, messageId, message, sender)
	elseif messageId == hash("mouse_wheel_up") then
		handle_mouse_wheel_up(self, messageId, message, sender)
	elseif messageId == hash("toggle_inventory") then
		handle_toggle_inventory(self, messageId, message, sender)
	elseif messageId == hash("update_toolbar") then
		handle_update_toolbar(self, messageId, message, sender)
	end
end